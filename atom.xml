<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lvzhh&#39;s Blog</title>
  
  <subtitle>a memo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lvzhh.github.io/"/>
  <updated>2018-05-24T09:03:45.753Z</updated>
  <id>http://lvzhh.github.io/</id>
  
  <author>
    <name>Lvzhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BBST</title>
    <link href="http://lvzhh.github.io/2018/05/BBST/"/>
    <id>http://lvzhh.github.io/2018/05/BBST/</id>
    <published>2018-05-24T08:57:21.000Z</published>
    <updated>2018-05-24T09:03:45.753Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一下各种BBST，简单总结一下。</p><p>Splay Tree：区间操作强无敌…对[l,r)区间的操作，把l-1结点splay到树根，r结点splay到根的右结点，则根的右结点的左子树就是区间[l,r)，然后对这棵子树进行操作。一个splay操作的均摊复杂度为O(logn)。</p><p>常见操作：[l,r)区间每个数加a，每个结点维护一个加的数值的lazy_tag</p><p>[l,r)区间翻转，每个结点维护一个表示是否翻转的标记</p><p>在第k个元素后插入元素或区间，若是区间，则要先建成一棵bst，把第k个结点splay到树根，第k+1个结点splay到根的右孩子，把需要插入的子树接到右孩子的左孩子。</p><p>删除元素，得到区间[l,r)后摘除子树。</p><p>实现：刚开始看时还纳闷为什么在实现时都要先加根节点以及根节点的右孩子，然后把整个区间建在根的右孩子的左子树上。后来才想到对于整个区间[1,N+1)，这种做法相当于在开始和结尾各添加一个元素，对整个区间进行操作则需要把这两个结点splay到树根和根的右孩子，才能得到整个区间。在第一个元素前和最后一个元素后插入都需要借助这两个结点。<br><a id="more"></a><br>ref: https://zhuanlan.zhihu.com/p/32090049?iam=5a347fde94eade0536f38c5e7434e822</p><p>http://blog.csdn.net/acm_cxlove/article/details/7800979</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">HDU <span class="number">3487</span> Play With Chain</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 300010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrclc ch[ch[root][1]][0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, root;</span><br><span class="line"><span class="keyword">int</span> size[MAX_N], val[MAX_N], par[MAX_N], ch[MAX_N][<span class="number">2</span>], rev[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> nums[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// update x from its two children</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size[x] = size[ch[x][<span class="number">0</span>]] + size[ch[x][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make the lazy tag down</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (rev[x]) &#123;</span><br><span class="line">    swap(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">    rev[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">    rev[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">    rev[x] ^= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x will be changed to the pos of new node</span></span><br><span class="line"><span class="comment">// v val, p par</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> v, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  x = ++tot;</span><br><span class="line">  size[x] = <span class="number">1</span>;</span><br><span class="line">  val[x] = v;</span><br><span class="line">  par[x] = p;</span><br><span class="line">  ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  rev[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x points to new node</span></span><br><span class="line"><span class="comment">// interval [l, r), par p</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">  new_node(x, nums[m], p);</span><br><span class="line">  build(ch[x][<span class="number">0</span>], l, m, x);</span><br><span class="line">  build(ch[x][<span class="number">1</span>], m + <span class="number">1</span>, r, x);</span><br><span class="line">  push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  tot = root = <span class="number">0</span>;</span><br><span class="line">  size[<span class="number">0</span>] = val[<span class="number">0</span>] = par[<span class="number">0</span>] = ch[<span class="number">0</span>][<span class="number">0</span>] = ch[<span class="number">0</span>][<span class="number">1</span>] = rev[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  new_node(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  new_node(ch[root][<span class="number">1</span>], <span class="number">0</span>, root);</span><br><span class="line">  build(rrclc, <span class="number">1</span>, N + <span class="number">1</span>, ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// level x up through rotation</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p = par[x], g = par[p];</span><br><span class="line">  push_down(p); push_down(x);</span><br><span class="line">  <span class="keyword">int</span> tx = ch[p][<span class="number">0</span>] == x, tp = ch[g][<span class="number">0</span>] == p;</span><br><span class="line"></span><br><span class="line">  ch[p][!tx] = ch[x][tx];</span><br><span class="line">  <span class="keyword">if</span> (ch[x][tx]) par[ch[x][tx]] = p;</span><br><span class="line">  </span><br><span class="line">  ch[x][tx] = p; par[p] = x;</span><br><span class="line">  </span><br><span class="line">  par[x] = g;</span><br><span class="line">  <span class="keyword">if</span> (g) ch[g][!tp] = x;</span><br><span class="line"></span><br><span class="line">  push_up(p); push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// splay node x up until its par is r</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p = par[x];</span><br><span class="line">  <span class="keyword">while</span> (p != r) &#123;</span><br><span class="line">    <span class="keyword">int</span> g = par[p];</span><br><span class="line">    <span class="keyword">if</span> (g == r) rotate(x); <span class="comment">// two level</span></span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// three level</span></span><br><span class="line">      push_down(g); push_down(p);</span><br><span class="line">      <span class="keyword">int</span> tx = ch[p][<span class="number">0</span>] == x, tp = ch[g][<span class="number">0</span>] == p;</span><br><span class="line">      <span class="keyword">if</span> (tx == tp) rotate(p);</span><br><span class="line">      <span class="keyword">else</span> rotate(x);</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">    p = par[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r == <span class="number">0</span>) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// r is the root of subtree</span></span><br><span class="line"><span class="comment">// k: the order of inorder tranverse</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  push_down(r);</span><br><span class="line">  <span class="keyword">int</span> ls = size[ch[r][<span class="number">0</span>]], rs = size[ch[r][<span class="number">1</span>]];</span><br><span class="line">  <span class="keyword">if</span> (ls == k) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; ls) <span class="keyword">return</span> get_kth(ch[r][<span class="number">0</span>], k);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> get_kth(ch[r][<span class="number">1</span>], k - ls - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r + <span class="number">1</span>), root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> cr = rrclc;</span><br><span class="line">  par[cr] = <span class="number">0</span>; rrclc = <span class="number">0</span>;</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]); push_up(root);</span><br><span class="line"></span><br><span class="line">  splay(get_kth(root, c), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, c + <span class="number">1</span>), root);</span><br><span class="line"></span><br><span class="line">  rrclc = cr; par[cr] = ch[root][<span class="number">1</span>];</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]); push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r + <span class="number">1</span>), root);</span><br><span class="line">  rev[rrclc] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  q.push(r);</span><br><span class="line">  <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> s = q.size();</span><br><span class="line">    <span class="keyword">while</span> (s--) &#123;</span><br><span class="line">      <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">      <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) q.push(ch[x][<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) q.push(ch[x][<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> first;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!r) <span class="keyword">return</span>;</span><br><span class="line">  push_down(r);</span><br><span class="line">  inorder(ch[r][<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span> (first) &#123;</span><br><span class="line">    first = !first;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, val[r]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d"</span>, val[r]);</span><br><span class="line">  &#125;</span><br><span class="line">  inorder(ch[r][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M) &amp;&amp; N &gt; <span class="number">0</span> &amp;&amp; M &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) nums[i] = i;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">      <span class="keyword">char</span> cmd[<span class="number">10</span>];</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</span><br><span class="line">      <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c; <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        cut(a, b, c);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">        flip(a, b);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    splay(get_kth(root, <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">    splay(get_kth(root, N + <span class="number">1</span>), root);</span><br><span class="line">    </span><br><span class="line">    first = <span class="literal">true</span>;</span><br><span class="line">    inorder(rrclc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// N = 10;</span></span><br><span class="line">  <span class="comment">// for (int i = 1; i &lt;= N; i++) nums[i] = i;</span></span><br><span class="line">  <span class="comment">// init();</span></span><br><span class="line">  <span class="comment">// splay(get_kth(root, 1), 0);</span></span><br><span class="line">  <span class="comment">// splay(get_kth(root, 5), root);</span></span><br><span class="line">  <span class="comment">// level(root);</span></span><br><span class="line">  <span class="comment">// inorder(root);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line">POJ <span class="number">3580</span> SuperMemo</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrclc ch[ch[root][1]][0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, root;</span><br><span class="line"><span class="keyword">int</span> size[MAX_N], par[MAX_N], ch[MAX_N][<span class="number">2</span>], val[MAX_N];</span><br><span class="line"><span class="keyword">int</span> rev[MAX_N], add[MAX_N], mi[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> nums[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lc = ch[x][<span class="number">0</span>], rc = ch[x][<span class="number">1</span>];</span><br><span class="line">  size[x] = size[lc] + size[rc] + <span class="number">1</span>;</span><br><span class="line">  mi[x] = min(val[x], min(mi[lc], mi[rc]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (rev[x]) &#123;</span><br><span class="line">    swap(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) rev[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) rev[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</span><br><span class="line">    rev[x] ^= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (add[x] != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ch[x][i]) &#123;</span><br><span class="line">        add[ch[x][i]] += add[x];</span><br><span class="line">        val[ch[x][i]] += add[x];</span><br><span class="line">        mi[ch[x][i]] += add[x];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add[x] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> v, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  x = ++tot;</span><br><span class="line">  size[x] = <span class="number">1</span>;</span><br><span class="line">  par[x] = p;</span><br><span class="line">  ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  val[x] = v;</span><br><span class="line">  rev[x] = <span class="number">0</span>;</span><br><span class="line">  add[x] = <span class="number">0</span>;</span><br><span class="line">  mi[x] = val[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) del_node(ch[x][<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) del_node(ch[x][<span class="number">1</span>]);</span><br><span class="line">  <span class="comment">// tot--;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">  new_node(x, nums[m], p);</span><br><span class="line">  build(ch[x][<span class="number">0</span>], l, m, x);</span><br><span class="line">  build(ch[x][<span class="number">1</span>], m + <span class="number">1</span>, r, x);</span><br><span class="line">  push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  tot = <span class="number">-1</span>;</span><br><span class="line">  new_node(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  size[root] = <span class="number">0</span>; mi[root] = INF;</span><br><span class="line">  new_node(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  new_node(ch[root][<span class="number">1</span>], <span class="number">0</span>, root);</span><br><span class="line">  build(rrclc, <span class="number">1</span>, N + <span class="number">1</span>, ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p = par[x], g = par[p]; <span class="comment">// if (p == 0) ?</span></span><br><span class="line">  push_down(p); push_down(x);</span><br><span class="line">  <span class="keyword">int</span> tx = ch[p][<span class="number">0</span>] == x, tp = ch[g][<span class="number">0</span>] == p;</span><br><span class="line"></span><br><span class="line">  ch[p][!tx] = ch[x][tx];</span><br><span class="line">  <span class="keyword">if</span> (ch[x][tx]) par[ch[x][tx]] = p;</span><br><span class="line"></span><br><span class="line">  ch[x][tx] = p; par[p] = x;</span><br><span class="line"></span><br><span class="line">  par[x] = g;</span><br><span class="line">  <span class="keyword">if</span> (g) ch[g][!tp] = x;</span><br><span class="line"></span><br><span class="line">  push_up(p); push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p = par[x];</span><br><span class="line">  <span class="keyword">while</span> (p != r) &#123;</span><br><span class="line">    <span class="keyword">int</span> g = par[p];</span><br><span class="line">    <span class="keyword">if</span> (g == r) rotate(x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      push_down(g); push_down(p);</span><br><span class="line">      <span class="keyword">int</span> tx = ch[p][<span class="number">0</span>] == x, tp = ch[g][<span class="number">0</span>] == p;</span><br><span class="line">      <span class="keyword">if</span> (tx == tp) rotate(p);</span><br><span class="line">      <span class="keyword">else</span> rotate(x);</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">    p = par[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (r == <span class="number">0</span>) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  push_down(r);</span><br><span class="line">  <span class="keyword">int</span> ls = size[ch[r][<span class="number">0</span>]], rs = size[ch[r][<span class="number">1</span>]];</span><br><span class="line">  <span class="keyword">if</span> (ls == k) <span class="keyword">return</span> r;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; ls) <span class="keyword">return</span> get_kth(ch[r][<span class="number">0</span>], k);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> get_kth(ch[r][<span class="number">1</span>], k - ls - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert new node with val v after k</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, k), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, k + <span class="number">1</span>), root);</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  new_node(x, v, ch[root][<span class="number">1</span>]);</span><br><span class="line">  rrclc = x;</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove [l, r) from splay tree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r), root);</span><br><span class="line">  <span class="keyword">int</span> cr = rrclc;</span><br><span class="line">  rrclc = <span class="number">0</span>; par[cr] = <span class="number">0</span>;</span><br><span class="line">  push_up(ch[root][<span class="number">1</span>]);</span><br><span class="line">  push_up(root);</span><br><span class="line">  <span class="keyword">return</span> cr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lazy_add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r), root);</span><br><span class="line">  add[rrclc] += d;</span><br><span class="line">  mi[rrclc] += d;</span><br><span class="line">  val[rrclc] += d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r), root);</span><br><span class="line">  rev[rrclc] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = r - l;</span><br><span class="line">  t %= m;</span><br><span class="line">  <span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t += m;</span><br><span class="line">  <span class="keyword">int</span> c1 = remove(r - t, r - <span class="number">1</span>), c2 = remove(l, r - t);</span><br><span class="line">  <span class="comment">// (r - 1) =&gt; (l)</span></span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, l + <span class="number">1</span>), root);</span><br><span class="line">  ch[rrclc][<span class="number">0</span>] = c1;</span><br><span class="line">  <span class="keyword">if</span> (c1) par[c1] = rrclc;</span><br><span class="line">  ch[rrclc][<span class="number">1</span>] = c2;</span><br><span class="line">  <span class="keyword">if</span> (c2) par[c2] = rrclc;</span><br><span class="line"></span><br><span class="line">  push_up(rrclc); push_up(ch[root][<span class="number">1</span>]); push_up(root);</span><br><span class="line">  <span class="comment">// reverse(l, r - t);</span></span><br><span class="line">  <span class="comment">// reverse(r - t, r);</span></span><br><span class="line">  <span class="comment">// reverse(l, r);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  splay(get_kth(root, l - <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">  splay(get_kth(root, r), root);</span><br><span class="line">  push_down(rrclc);</span><br><span class="line">  <span class="keyword">return</span> mi[rrclc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  q.push(r);</span><br><span class="line">  <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> s = q.size();</span><br><span class="line">    <span class="keyword">while</span> (s--) &#123;</span><br><span class="line">      <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">      <span class="keyword">if</span> (ch[f][<span class="number">0</span>]) q.push(ch[f][<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span> (ch[f][<span class="number">1</span>]) q.push(ch[f][<span class="number">1</span>]);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[f]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!r) <span class="keyword">return</span>;</span><br><span class="line">  push_down(r);</span><br><span class="line">  inorder(ch[r][<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[r]);</span><br><span class="line">  inorder(ch[r][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in.txt", "r", stdin);</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, nums + i);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M);</span><br><span class="line">  <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'A'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">      lazy_add(a, b + <span class="number">1</span>, c);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; cmd[<span class="number">3</span>] == <span class="string">'E'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">      reverse(a, b + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; cmd[<span class="number">3</span>] == <span class="string">'O'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">      revolve(a, b + <span class="number">1</span>, c);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'I'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">      insert(a, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'D'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a);</span><br><span class="line">      remove(a, a + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">      <span class="comment">// inorder(root); printf("\n");</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_min(a, b + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Treap：BST+heap，每个结点维护两个属性key,priority，结点的key满足bst，left.key&lt;x.key&lt;right.key；priority满足heap的性质，x.priority&lt;child.priority（若min heap）。相当于是首先把所有结点按照priority的大小从小到大排序，然后按照排序后的顺序依次插入bst。结点的priority是随机的，整个按照priority排序的序列相当于一个随机的序列，因n个关键字随机插入所构建的bst的高度期望是O(logn)，treap的高度的期望也是O(logn)。</p><p>一般treap可用来维护一个序列，给定x，查询x在序列排序后的位置；或给定位置k，查询元素x</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">POJ <span class="number">1442</span> Black Box</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">30000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">30000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = ~<span class="number">0U</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"><span class="keyword">int</span> A[MAX_M], u[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node *ch[<span class="number">2</span>], *par;</span><br><span class="line">  <span class="keyword">int</span> key, prio, size;</span><br><span class="line">  Node() &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_ch</span><span class="params">(Node* c, <span class="keyword">bool</span> tc)</span> </span>&#123;</span><br><span class="line">    ch[tc] = c;</span><br><span class="line">    c-&gt;par = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">tn</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> par-&gt;ch[<span class="number">1</span>] == <span class="keyword">this</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    size = ch[<span class="number">0</span>]-&gt;size + ch[<span class="number">1</span>]-&gt;size + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; Tnull, *null = &amp;Tnull;</span><br><span class="line"><span class="comment">// null's par and children may be modified</span></span><br><span class="line"></span><br><span class="line">Node mem[MAX_M], *ct = mem;</span><br><span class="line"></span><br><span class="line">Node* root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  root = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  ct-&gt;key = k;</span><br><span class="line">  ct-&gt;prio = rand();</span><br><span class="line">  ct-&gt;size = <span class="number">1</span>;</span><br><span class="line">  ct-&gt;ch[<span class="number">0</span>] = ct-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">  ct-&gt;par = null;</span><br><span class="line">  <span class="keyword">return</span> ct++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">  Node *p = x-&gt;par, *g = p-&gt;par; <span class="comment">// p != null</span></span><br><span class="line">  <span class="keyword">bool</span> tx = x-&gt;tn(), tp = p-&gt;tn();</span><br><span class="line">  <span class="comment">// p-&gt;set_ch(x-&gt;ch[!tx], tx);</span></span><br><span class="line">  p-&gt;ch[tx] = x-&gt;ch[!tx];</span><br><span class="line">  <span class="keyword">if</span> (x-&gt;ch[!tx] != null) x-&gt;ch[!tx]-&gt;par = p;</span><br><span class="line">  x-&gt;set_ch(p, !tx);</span><br><span class="line">  p-&gt;up();</span><br><span class="line">  x-&gt;up();</span><br><span class="line">  x-&gt;par = g;</span><br><span class="line">  <span class="keyword">if</span> (g != null) g-&gt;ch[tp] = x;</span><br><span class="line">  <span class="keyword">else</span> root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// min heap</span></span><br><span class="line"><span class="comment">// x's left child.key &lt; x.key</span></span><br><span class="line"><span class="comment">// right child.key &gt;= x.key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Node* x = new_node(k);</span><br><span class="line">  <span class="keyword">if</span> (root == null) &#123;</span><br><span class="line">    root = x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node* p = root;</span><br><span class="line">  <span class="keyword">while</span> (p != null) &#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; p-&gt;key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;ch[<span class="number">0</span>] == null) &#123;</span><br><span class="line">        p-&gt;set_ch(x, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      p = p-&gt;ch[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;ch[<span class="number">1</span>] == null) &#123;</span><br><span class="line">        p-&gt;set_ch(x, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      p = p-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (p != null) &#123;</span><br><span class="line">    p-&gt;up();</span><br><span class="line">    p = p-&gt;par;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (x-&gt;par != null &amp;&amp; x-&gt;par-&gt;prio &gt; x-&gt;prio) &#123;</span><br><span class="line">    rotate(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Node* p = root;</span><br><span class="line">  <span class="keyword">while</span> (p != null) &#123;</span><br><span class="line">    <span class="keyword">int</span> ls = p-&gt;ch[<span class="number">0</span>]-&gt;size;</span><br><span class="line">    <span class="keyword">if</span> (ls == k) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; ls) p = p-&gt;ch[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      k = k - ls - <span class="number">1</span>;</span><br><span class="line">      p = p-&gt;ch[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node* r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (r == null) <span class="keyword">return</span>;</span><br><span class="line">  inorder(r-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d "</span>, r-&gt;key);</span><br><span class="line">  inorder(r-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in.txt", "r", stdin);</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;M, &amp;N);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i);</span><br><span class="line">  <span class="comment">// for (int i = 1; i &lt;= M; i++) &#123;</span></span><br><span class="line">  <span class="comment">//   insert(A[i]);</span></span><br><span class="line">  <span class="comment">//   inorder(root); printf("\n");</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, u + i);</span><br><span class="line">  u[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = u[i - <span class="number">1</span>] + <span class="number">1</span>; j &lt;= u[i]; j++) &#123;</span><br><span class="line">      insert(A[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// inorder(root); printf("\n");</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_kth(i - <span class="number">1</span>)-&gt;key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AVL Tree：nice的结构，在插入删除时进行旋转操作保证左右树高差不超过1</p><p>旋转操作比较复杂，总结一下即左高时右旋，若左子树右高，则左子树先左旋；右高时左旋，若右子树左高，则右子树先右旋。</p><p>AVL树与Treap一样都是用来实现BBST，还有红黑树，不过实现就有点复杂了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">SPOJ AVL Tree</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key, val, size, height;</span><br><span class="line">    Node* ch[<span class="number">2</span>]; <span class="comment">// no par pointer =&gt; all rec</span></span><br><span class="line">    Node() : size(<span class="number">0</span>), height(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      size = ch[<span class="number">0</span>]-&gt;size + ch[<span class="number">1</span>]-&gt;size + <span class="number">1</span>;</span><br><span class="line">      height = max(ch[<span class="number">0</span>]-&gt;height, ch[<span class="number">1</span>]-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bf</span><span class="params">()</span> </span>&#123; <span class="comment">// left.height - right.height</span></span><br><span class="line">      <span class="keyword">return</span> ch[<span class="number">0</span>]-&gt;height - ch[<span class="number">1</span>]-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; Tnull, *null;</span><br><span class="line"></span><br><span class="line">  Node mem[MAX_N], *ct;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    ct-&gt;key = key;</span><br><span class="line">    ct-&gt;val = val;</span><br><span class="line">    ct-&gt;size = <span class="number">1</span>;</span><br><span class="line">    ct-&gt;height = <span class="number">1</span>;</span><br><span class="line">    ct-&gt;ch[<span class="number">0</span>] = ct-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">    <span class="keyword">return</span> ct++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node* root;</span><br><span class="line"></span><br><span class="line">  AVLTree() &#123;</span><br><span class="line">    null = &amp;Tnull;</span><br><span class="line">    ct = mem;</span><br><span class="line">    root = null;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == null) &#123;</span><br><span class="line">      root = new_node(key, val);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    put(root, key, val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">put</span><span class="params">(Node* x, <span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == null) <span class="keyword">return</span> new_node(key, val);</span><br><span class="line">    <span class="keyword">if</span> (key &lt; x-&gt;key) &#123;</span><br><span class="line">      x-&gt;ch[<span class="number">0</span>] = put(x-&gt;ch[<span class="number">0</span>], key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;key &lt; key) &#123;</span><br><span class="line">      x-&gt;ch[<span class="number">1</span>] = put(x-&gt;ch[<span class="number">1</span>], key, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x-&gt;val = val;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    x-&gt;up();</span><br><span class="line">    <span class="keyword">return</span> balance(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// t: 1 right rotation; 0 left rotation</span></span><br><span class="line">  <span class="function">Node* <span class="title">rotate</span><span class="params">(Node* x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    Node* c = x-&gt;ch[!t];</span><br><span class="line">    x-&gt;ch[!t] = c-&gt;ch[t];</span><br><span class="line">    c-&gt;ch[t] = x;</span><br><span class="line">    x-&gt;up();</span><br><span class="line">    c-&gt;up();</span><br><span class="line">    <span class="keyword">if</span> (root == x) root = c;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">balance</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;bf() &lt; <span class="number">-1</span>) &#123; <span class="comment">// x right higher</span></span><br><span class="line">      <span class="keyword">if</span> (x-&gt;ch[<span class="number">1</span>]-&gt;bf() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        x-&gt;ch[<span class="number">1</span>] = rotate(x-&gt;ch[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      x = rotate(x, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;bf() &gt; <span class="number">1</span>) &#123; <span class="comment">// x left higher</span></span><br><span class="line">      <span class="keyword">if</span> (x-&gt;ch[<span class="number">0</span>]-&gt;bf() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x-&gt;ch[<span class="number">0</span>] = rotate(x-&gt;ch[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      x = rotate(x, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node* x, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == null) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;key == key) <span class="keyword">return</span> x-&gt;ch[<span class="number">0</span>]-&gt;size;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; x-&gt;key) &#123;</span><br><span class="line">      <span class="keyword">return</span> rank(x-&gt;ch[<span class="number">0</span>], key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> r = rank(x-&gt;ch[<span class="number">1</span>], key);</span><br><span class="line">      <span class="keyword">return</span> (r == <span class="number">-1</span>) ? r : x-&gt;ch[<span class="number">0</span>]-&gt;size + <span class="number">1</span> + r;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == null) <span class="keyword">return</span>;</span><br><span class="line">    inorder(x-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, x-&gt;key);</span><br><span class="line">    inorder(x-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in.txt", "r", stdin);</span></span><br><span class="line">  AVLTree* t = <span class="keyword">new</span> AVLTree();</span><br><span class="line">  <span class="keyword">int</span> Q, type, n, r;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">  <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;type, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">      t-&gt;insert(n, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">// t-&gt;inorder(t-&gt;root); printf("\n");</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r = t-&gt;rank(t-&gt;root, n);</span><br><span class="line">      <span class="keyword">if</span> (r == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Data tidak ada\n"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了一下各种BBST，简单总结一下。&lt;/p&gt;
&lt;p&gt;Splay Tree：区间操作强无敌…对[l,r)区间的操作，把l-1结点splay到树根，r结点splay到根的右结点，则根的右结点的左子树就是区间[l,r)，然后对这棵子树进行操作。一个splay操作的均摊复杂度为O(logn)。&lt;/p&gt;
&lt;p&gt;常见操作：[l,r)区间每个数加a，每个结点维护一个加的数值的lazy_tag&lt;/p&gt;
&lt;p&gt;[l,r)区间翻转，每个结点维护一个表示是否翻转的标记&lt;/p&gt;
&lt;p&gt;在第k个元素后插入元素或区间，若是区间，则要先建成一棵bst，把第k个结点splay到树根，第k+1个结点splay到根的右孩子，把需要插入的子树接到右孩子的左孩子。&lt;/p&gt;
&lt;p&gt;删除元素，得到区间[l,r)后摘除子树。&lt;/p&gt;
&lt;p&gt;实现：刚开始看时还纳闷为什么在实现时都要先加根节点以及根节点的右孩子，然后把整个区间建在根的右孩子的左子树上。后来才想到对于整个区间[1,N+1)，这种做法相当于在开始和结尾各添加一个元素，对整个区间进行操作则需要把这两个结点splay到树根和根的右孩子，才能得到整个区间。在第一个元素前和最后一个元素后插入都需要借助这两个结点。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡树" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="splay" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/splay/"/>
    
      <category term="treap" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/treap/"/>
    
      <category term="AVL" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/AVL/"/>
    
    
      <category term="template" scheme="http://lvzhh.github.io/tags/template/"/>
    
      <category term="HDU" scheme="http://lvzhh.github.io/tags/HDU/"/>
    
      <category term="POJ" scheme="http://lvzhh.github.io/tags/POJ/"/>
    
      <category term="SPOJ" scheme="http://lvzhh.github.io/tags/SPOJ/"/>
    
  </entry>
  
  <entry>
    <title>Link Cut Tree</title>
    <link href="http://lvzhh.github.io/2018/05/Link-Cut-Tree/"/>
    <id>http://lvzhh.github.io/2018/05/Link-Cut-Tree/</id>
    <published>2018-05-24T02:08:41.000Z</published>
    <updated>2018-05-24T09:05:38.344Z</updated>
    
    <content type="html"><![CDATA[<p>LCT用来维护<strong>有根树的森林</strong>。对任意结点v，Preferred Child（PC）的定义为：如果v没被访问过或者刚刚访问到v，则PC[v] = null；如果刚刚访问到v的孩子结点u所在的子树，则PC[v] = u。v到其preferred child（如果有）的边为preferred edge，preferred edge连接起来形成preferred path。需要表示的树（也就是直观上的树）称为represented tree。LCT把每一条preferred path维护成一个树，称为Auxiliary Tree，所用的数据结构为Splay Tree。</p><p>树链剖分是Heavy Light Decomposition，把一个结点的孩子分为重和轻，是按照树的结构来进行划分。LCT是Preferred Path Decomposition，是按照对结点的访问来划分的。<br><a id="more"></a><br>借用MIT 6.851课件的图：<br><img src="0.png"></p><p>LCT的基本操作为access(v),make_root(v),link(v,w),cut(v,w)<br>in represented tree world:<br>access(v)把从根结点到v的路径变为preferred path<br>make_root(v)把v变为所在有根树的根结点<br>link(v,w)v是所在树的根结点，连接v和w<br>cut(v,w)去掉v和w之间的边</p><p>in Aux tree world:<br>实现上 见代码&gt;,&lt;<br>每个操作的复杂度为O(logn)，证明？</p><p>在每一个splay树中，相当于是把结点深度作为键值，进行中序遍历可得到从最接近根的结点到深度最大的结点的路径，即一条preferred path所对应的结点。<br>access(v)把根结点到v的路径上的所有结点放在一颗splay树中，如果维护路径上的信息，则可在这颗splay树的根结点获得统计信息。<br>如果要得到u到v的路径上的统计信息，可以先make_root(u)把u变为有根树的根结点，再access(v)把u到v的路径上的所有结点放在一个splay树中。<br>LCT是来解决动态树问题的，也就是树的结构在发生变化，不断有边的加入或边的消去。在树的结构发生变化的条件下树链剖分不太能做。</p><p>UOJ 3 魔法森林<br>按照A的值排序所有的边，按照排好的顺序依次向图中加入边，图中每条边的权值为此边的B值。加边的规则为：设边e的两端点是(u,v)，如果u,v不连通则加入e；如果连通，则查询u到v的路径上的最大权值b，如果b&gt;e.B，则去掉u-&gt;v路径上最大权值的边，加入e，否则不加入e。</p><p>每加入一条边e，查询1和N是否连通，如果连通则求出1到N的路径上最大权值，所求结果1-&gt;N的路径所对应的值（即最大A值+最大B值）r=min（e.A+1-&gt;N路径上的最大权值）。</p><p>证明：<br>按照加入边的规则，保证任意一对结点之间最多只有一条路径，也就是在加边的过程中，这个图是一个森林。</p><p>证明在加入边e之后的森林中1-&gt;N的路径所对应的值为min（e.A+1-&gt;N路径上的最大权值）：<br>如果加入e之前1-&gt;N不连通，加入e之后连通则1-&gt;N的路径上必包含e，此条路径所对应的值为（e.A+1-&gt;N路径上的最大权值）。<br>如果加入e之前1-&gt;N已经连通，加入e后，如果1-&gt;N的路径上包含e，则此条路径所对应的值为（e.A+1-&gt;N路径上的最大权值）。如果1-&gt;N的路径上不包含e，则（e.A+1-&gt;N路径上的最大权值）&gt;=（e1.A+1-&gt;N路径上的最大权值），e1为1-&gt;N的路径上A值最大的边，e1在e之前加入，有e.A&gt;=e1.A，则此次更新不影响结果。</p><p>粗略证明加边策略的正确性：<br>任意两点之间的最大权值尽可能小，这样才能使1-&gt;N路径上的最大权值尽可能减少，才能使1-&gt;N的路径所对应的值尽可能减少。</p><p>实现上，因为所维护的值在顶点上，把一条边作为一个顶点w，加入边e(u,v)时加入w-&gt;u和w-&gt;v两条边，去边e(u,v)时也是去两条。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = ~<span class="number">0U</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, v, A, B;</span><br><span class="line">&#125; es[MAX_M];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> Edge&amp; e1, <span class="keyword">const</span> Edge&amp; e2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> e1.A &lt; e2.A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// union set</span></span><br><span class="line"><span class="keyword">int</span> par[MAX_N], rank[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x == par[x]) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> par[x] = find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = find(x);</span><br><span class="line">  y = find(y);</span><br><span class="line">  <span class="keyword">if</span> (rank[x] &lt; rank[y]) &#123;</span><br><span class="line">    par[x] = y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    par[y] = x;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] == rank[y]) rank[x]++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCT</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node *p, *ch[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">int</span> val, id, mx, mxid, rev, size;</span><br><span class="line">  Node() &#123;</span><br><span class="line">    val = <span class="number">0</span>;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> == p-&gt;ch[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(Node* c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    ch[d] = c;</span><br><span class="line">    c-&gt;p = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">revIt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rev ^= <span class="number">1</span>;</span><br><span class="line">    swap(ch[<span class="number">0</span>], ch[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;ch[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;ch[<span class="number">1</span>] != <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mx = val;</span><br><span class="line">    mxid = id;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ch[i]-&gt;mx &gt; mx) &#123;</span><br><span class="line">        mx = ch[i]-&gt;mx;</span><br><span class="line">        mxid = ch[i]-&gt;mxid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size = ch[<span class="number">0</span>]-&gt;size + ch[<span class="number">1</span>]-&gt;size + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev) &#123;</span><br><span class="line">      ch[<span class="number">0</span>]-&gt;revIt();</span><br><span class="line">      ch[<span class="number">1</span>]-&gt;revIt();</span><br><span class="line">      rev = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Tnull, *null = &amp;Tnull;</span><br><span class="line">Node npool[MAX_N + MAX_M], *V[MAX_N + MAX_M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    par[i] = i;</span><br><span class="line">    rank[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N + M; i++) &#123;</span><br><span class="line">    Node* v = npool + i;</span><br><span class="line">    V[i] = v;</span><br><span class="line">    v-&gt;p = null;</span><br><span class="line">    v-&gt;ch[<span class="number">0</span>] = null;</span><br><span class="line">    v-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">    v-&gt;val = i &gt; N ? es[i - N].B : <span class="number">0</span>; </span><br><span class="line">    v-&gt;id = i &gt; N ? i - N : <span class="number">0</span>;</span><br><span class="line">    v-&gt;mx = v-&gt;val;</span><br><span class="line">    v-&gt;mxid = v-&gt;id;</span><br><span class="line">    v-&gt;rev = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">  Node* p = x-&gt;p;</span><br><span class="line">  <span class="keyword">int</span> d = x-&gt;d();</span><br><span class="line">  p-&gt;push_down();</span><br><span class="line">  x-&gt;push_down();</span><br><span class="line">  <span class="keyword">if</span> (p-&gt;is_root()) &#123;</span><br><span class="line">    x-&gt;p = p-&gt;p;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    p-&gt;p-&gt;setc(x, p-&gt;d());</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;setc(x-&gt;ch[!d], d);</span><br><span class="line">  x-&gt;setc(p, !d);</span><br><span class="line">  p-&gt;push_up();</span><br><span class="line">  <span class="comment">// x-&gt;push_up();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">  x-&gt;push_down();</span><br><span class="line">  <span class="keyword">while</span> (!x-&gt;is_root()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;p-&gt;is_root()) &#123;</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x-&gt;d() == x-&gt;p-&gt;d() ? rotate(x-&gt;p) : rotate(x);</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  x-&gt;push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(Node* v)</span> </span>&#123;</span><br><span class="line">  Node* t = null;</span><br><span class="line">  <span class="keyword">while</span> (v != null) &#123;</span><br><span class="line">    splay(v);</span><br><span class="line">    v-&gt;ch[<span class="number">1</span>] = t;</span><br><span class="line">    v-&gt;push_up();</span><br><span class="line">    t = v;</span><br><span class="line">    v = v-&gt;p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(Node* v)</span> </span>&#123;</span><br><span class="line">  access(v);</span><br><span class="line">  splay(v);</span><br><span class="line">  v-&gt;revIt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(Node* v, Node* u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  v-&gt;p = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(Node* v, Node* u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  access(u);</span><br><span class="line">  splay(u);</span><br><span class="line">  v-&gt;p = null;</span><br><span class="line">  u-&gt;ch[<span class="number">0</span>] = null;</span><br><span class="line">  u-&gt;push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">query</span><span class="params">(Node* v, Node* u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  access(u);</span><br><span class="line">  splay(u);</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v, A, B;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;u, &amp;v, &amp;A, &amp;B);</span><br><span class="line">    es[i] = (Edge)&#123;u, v, A, B&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(es + <span class="number">1</span>, es + M + <span class="number">1</span>, comp);</span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">int</span> res = INF;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">    Edge&amp; e = es[i];</span><br><span class="line">    <span class="keyword">int</span> u = e.u, v = e.v;</span><br><span class="line">    <span class="keyword">if</span> (same(u, v)) &#123;</span><br><span class="line">      Node* q = query(V[u], V[v]);</span><br><span class="line">      <span class="keyword">if</span> (q-&gt;mx &gt; e.B) &#123;</span><br><span class="line">        <span class="comment">// cause q-&gt;mxid maybe changed in cut and link ops</span></span><br><span class="line">        <span class="keyword">int</span> mxid = q-&gt;mxid;</span><br><span class="line">        Edge&amp; e1 = es[mxid];</span><br><span class="line">        <span class="keyword">int</span> u1 = e1.u, v1 = e1.v;</span><br><span class="line">        cut(V[u1], V[N + mxid]);</span><br><span class="line">        cut(V[v1], V[N + mxid]);</span><br><span class="line">        link(V[u], V[N + i]);</span><br><span class="line">        link(V[v], V[N + i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      unite(u, v);</span><br><span class="line">      link(V[u], V[N + i]);</span><br><span class="line">      link(V[v], V[N + i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (same(<span class="number">1</span>, N)) &#123;</span><br><span class="line">      <span class="comment">// query path from 1 to N</span></span><br><span class="line">      res = min(res, e.A + query(V[<span class="number">1</span>], V[N])-&gt;mx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res == INF ? <span class="number">-1</span> : res);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BZOJ 2049 Cave 洞穴勘测<br>LCT模板题<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">    Result: Accepted</span><br><span class="line">    Time:<span class="number">1632</span> ms</span><br><span class="line">    Memory:<span class="number">1488</span> kb</span><br><span class="line">****************************************************************/</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node *p, *ch[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">int</span> rev;</span><br><span class="line">  Node() &#123;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> == p-&gt;ch[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(Node* c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    ch[d] = c;</span><br><span class="line">    c-&gt;p = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">revIt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rev ^= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev) &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;revIt();</span><br><span class="line">      ch[<span class="number">0</span>]-&gt;revIt();</span><br><span class="line">      ch[<span class="number">1</span>]-&gt;revIt();</span><br><span class="line">      swap(ch[<span class="number">0</span>], ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Tnull, *null = &amp;Tnull;</span><br><span class="line">Node mem[MAX_N], *C = mem, *V[MAX_N];</span><br><span class="line"><span class="keyword">bool</span> Node::is_root() &#123;</span><br><span class="line">  <span class="comment">// return p-&gt;ch[0] != this &amp;&amp; p-&gt;ch[1] != this;</span></span><br><span class="line">  <span class="keyword">return</span> p == null || (p-&gt;ch[<span class="number">0</span>] != <span class="keyword">this</span> &amp;&amp; p-&gt;ch[<span class="number">1</span>] != <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node* <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  C-&gt;p = null;</span><br><span class="line">  C-&gt;ch[<span class="number">0</span>] = null;</span><br><span class="line">  C-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">  C-&gt;rev = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> C++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    V[i] = new_node();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">  Node* p = x-&gt;p;</span><br><span class="line">  p-&gt;push_down();</span><br><span class="line">  x-&gt;push_down();</span><br><span class="line">  <span class="keyword">int</span> d = x-&gt;d();</span><br><span class="line">  <span class="keyword">if</span> (p-&gt;is_root()) &#123;</span><br><span class="line">    x-&gt;p = p-&gt;p;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    p-&gt;p-&gt;setc(x, p-&gt;d());</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;setc(x-&gt;ch[!d], d);</span><br><span class="line">  x-&gt;setc(p, !d);</span><br><span class="line">  p-&gt;push_up();</span><br><span class="line">  <span class="comment">// x-&gt;push_up();</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(Node* x)</span> </span>&#123;</span><br><span class="line">  x-&gt;push_down();</span><br><span class="line">  <span class="keyword">while</span> (!x-&gt;is_root()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;p-&gt;is_root()) &#123;</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x-&gt;d() == x-&gt;p-&gt;d() ? rotate(x-&gt;p) : rotate(x);</span><br><span class="line">      rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  x-&gt;push_up();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(Node* v)</span> </span>&#123;</span><br><span class="line">  Node* t = null;</span><br><span class="line">  <span class="keyword">while</span> (v != null) &#123;</span><br><span class="line">    splay(v);</span><br><span class="line">    v-&gt;ch[<span class="number">1</span>] = t;</span><br><span class="line">    v-&gt;push_up();</span><br><span class="line">    t = v;</span><br><span class="line">    v = v-&gt;p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(Node* v)</span> </span>&#123;</span><br><span class="line">  access(v);</span><br><span class="line">  splay(v);</span><br><span class="line">  v-&gt;revIt();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Node* <span class="title">find_root</span><span class="params">(Node* v)</span> </span>&#123;</span><br><span class="line">  access(v);</span><br><span class="line">  splay(v);</span><br><span class="line">  Node* r = v;</span><br><span class="line">  <span class="keyword">while</span> (r-&gt;ch[<span class="number">0</span>] != null) r = r-&gt;ch[<span class="number">0</span>];</span><br><span class="line">  splay(r);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(Node* v, Node* w)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  <span class="comment">// if (find_root(w) == v) return;</span></span><br><span class="line">  v-&gt;p = w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(Node* v, Node* u)</span> </span>&#123;</span><br><span class="line">  make_root(v);</span><br><span class="line">  <span class="comment">// if (find_root(u) != v) return;</span></span><br><span class="line">  access(u);</span><br><span class="line">  splay(u);</span><br><span class="line">  v-&gt;p = null;</span><br><span class="line">  u-&gt;ch[<span class="number">0</span>] = null;</span><br><span class="line">  u-&gt;push_up();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(Node* v, Node* u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> find_root(v) == find_root(u);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">  build();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, cmd, &amp;u, &amp;v);</span><br><span class="line">    <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, query(V[u], V[v]) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">      <span class="comment">// if u v already connect</span></span><br><span class="line">      link(V[u], V[v]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// if u v don't connect</span></span><br><span class="line">      cut(V[u], V[v]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LCT用来维护&lt;strong&gt;有根树的森林&lt;/strong&gt;。对任意结点v，Preferred Child（PC）的定义为：如果v没被访问过或者刚刚访问到v，则PC[v] = null；如果刚刚访问到v的孩子结点u所在的子树，则PC[v] = u。v到其preferred child（如果有）的边为preferred edge，preferred edge连接起来形成preferred path。需要表示的树（也就是直观上的树）称为represented tree。LCT把每一条preferred path维护成一个树，称为Auxiliary Tree，所用的数据结构为Splay Tree。&lt;/p&gt;
&lt;p&gt;树链剖分是Heavy Light Decomposition，把一个结点的孩子分为重和轻，是按照树的结构来进行划分。LCT是Preferred Path Decomposition，是按照对结点的访问来划分的。&lt;br&gt;
    
    </summary>
    
      <category term="图论" scheme="http://lvzhh.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="树" scheme="http://lvzhh.github.io/categories/%E5%9B%BE%E8%AE%BA/%E6%A0%91/"/>
    
      <category term="link cut tree" scheme="http://lvzhh.github.io/categories/%E5%9B%BE%E8%AE%BA/%E6%A0%91/link-cut-tree/"/>
    
    
      <category term="template" scheme="http://lvzhh.github.io/tags/template/"/>
    
      <category term="UOJ" scheme="http://lvzhh.github.io/tags/UOJ/"/>
    
      <category term="BZOJ" scheme="http://lvzhh.github.io/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>UVA 10820 Send a Table</title>
    <link href="http://lvzhh.github.io/2018/05/UVA-10820-Send-a-Table/"/>
    <id>http://lvzhh.github.io/2018/05/UVA-10820-Send-a-Table/</id>
    <published>2018-05-22T13:06:31.000Z</published>
    <updated>2018-05-24T08:50:38.594Z</updated>
    
    <content type="html"><![CDATA[<p>所有可能的数对数量为N×N<br>所求的（x，y）一定满足x，y互素，否则设公约数为t，（x，y）可由（x/t，y/t）得到<br>若（x，y）互素，那么（y，x）也互素<br>若能求出满足1&lt;=x&lt;=N，1&lt;=y&lt;=x的互素的（x，y），那么经过对称即可得到所有的数对（可从N×N的二维图上来理解）</p><p>求phi值时注意避免溢出<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> phi[MAX_N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler_function</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) phi[i] = i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="comment">// phi[i] == i, then i is prime</span></span><br><span class="line">    <span class="keyword">if</span> (phi[i] != i) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= N; j += i) &#123;</span><br><span class="line">      <span class="comment">// first / i then * (i - 1)</span></span><br><span class="line">      <span class="comment">// ensures phi[j] &lt;= j and no overflow</span></span><br><span class="line">      phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  euler_function(MAX_N);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) &amp;&amp; N) &#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) res += phi[i];</span><br><span class="line">    res = res * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有可能的数对数量为N×N&lt;br&gt;
所求的（x，y）一定满足x，y互素，否则设公约数为t，（x，y）可由（x/t，y/t）得到&lt;br&gt;
若（x，y）互素，那么（y，x）也互素&lt;br&gt;
若能求出满足1&amp;lt;=x&amp;lt;=N，1&amp;lt;=y&amp;lt;=x的互素的（x，y），那么经过对称即可得到所有的数对（可从N×N的二维图上来理解）&lt;/p&gt;
&lt;p&gt;求phi值时注意避免溢出&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="欧拉函数" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E5%AD%A6/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="template" scheme="http://lvzhh.github.io/tags/template/"/>
    
      <category term="UVA" scheme="http://lvzhh.github.io/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>HDU 1402. A * B Problem Plus(FFT)</title>
    <link href="http://lvzhh.github.io/2018/05/HDU-1402-A-B-Problem-Plus-FFT/"/>
    <id>http://lvzhh.github.io/2018/05/HDU-1402-A-B-Problem-Plus-FFT/</id>
    <published>2018-05-22T13:01:55.000Z</published>
    <updated>2018-05-24T08:52:39.503Z</updated>
    
    <content type="html"><![CDATA[<p>递归版本的FFT还是好写…<br>输出结果时，注意特殊情况0*0=0<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; Comp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> Comp <span class="title">I</span><span class="params">(<span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> M_PI 3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">Comp tmp[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFT</span><span class="params">(Comp* a, <span class="keyword">int</span> n, <span class="keyword">int</span> rev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    tmp[i] = a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">      a[n / <span class="number">2</span> + i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      a[i / <span class="number">2</span>] = tmp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  Comp *a0 = a, *a1 = a + n / <span class="number">2</span>;</span><br><span class="line">  DFT(a0, n / <span class="number">2</span>, rev);</span><br><span class="line">  DFT(a1, n / <span class="number">2</span>, rev);</span><br><span class="line">  </span><br><span class="line">  <span class="function">Comp <span class="title">cur</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">double</span> alpha = <span class="number">2</span> * M_PI / n * rev;</span><br><span class="line">  Comp step = <span class="built_in">exp</span>(I * alpha);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n / <span class="number">2</span>; k++) &#123;</span><br><span class="line">    tmp[k] = a0[k] + cur * a1[k];</span><br><span class="line">    tmp[k + n / <span class="number">2</span>] = a0[k] - cur * a1[k];</span><br><span class="line">    cur *= step;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    a[i] = tmp[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> A[MAX_N], B[MAX_N];</span><br><span class="line">Comp a[<span class="number">1</span> &lt;&lt; <span class="number">17</span>] = &#123; &#125;, b[<span class="number">1</span> &lt;&lt; <span class="number">17</span>] = &#123; &#125;;</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, A, B) != EOF) &#123;</span><br><span class="line">    <span class="keyword">int</span> lA = <span class="built_in">strlen</span>(A), lB = <span class="built_in">strlen</span>(B);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; lA + lB) n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      a[i] = <span class="number">0</span>;</span><br><span class="line">      b[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lA; i++) &#123;</span><br><span class="line">      a[i] = A[lA - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lB; i++) &#123;</span><br><span class="line">      b[i] = B[lB - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// FFT</span></span><br><span class="line">    DFT(a, n, <span class="number">1</span>);</span><br><span class="line">    DFT(b, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      a[i] *= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    DFT(a, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      a[i] /= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// res processing</span></span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(res));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">      res[i] += <span class="keyword">int</span>(a[i].real() + <span class="number">0.5</span>);</span><br><span class="line">      res[i + <span class="number">1</span>] = res[i] / <span class="number">10</span>;</span><br><span class="line">      res[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (res[k] == <span class="number">0</span>) k--;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (k &gt;= <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, res[k--]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Reference：http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform#i-12</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;递归版本的FFT还是好写…&lt;br&gt;
输出结果时，注意特殊情况0*0=0&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="快速傅里叶变换" scheme="http://lvzhh.github.io/categories/%E6%95%B0%E5%AD%A6/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    
    
      <category term="template" scheme="http://lvzhh.github.io/tags/template/"/>
    
      <category term="HDU" scheme="http://lvzhh.github.io/tags/HDU/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lvzhh.github.io/2018/05/hello-world/"/>
    <id>http://lvzhh.github.io/2018/05/hello-world/</id>
    <published>2018-05-21T13:13:23.000Z</published>
    <updated>2018-05-24T09:10:27.690Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;Quick Start&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;Create a new post&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>math test - CF #456(div 2) D-Fishes</title>
    <link href="http://lvzhh.github.io/2018/05/math%20test/"/>
    <id>http://lvzhh.github.io/2018/05/math test/</id>
    <published>2018-05-20T13:13:23.000Z</published>
    <updated>2018-05-24T09:09:23.017Z</updated>
    
    <content type="html"><![CDATA[<p>这是个数学题a…<br>所有的<span class="math inline">\(r*r\)</span>的scoop的数目为<span class="math inline">\((n-r+1)*(m-r+1)\)</span><br>其中包含坐标<span class="math inline">\((x,y)\)</span>的scoop的数目为（坐标index从1开始）<span class="math display">\[f(x,y)=(min(n+1,x+r)-max(x,r))*(min(m+1,y+r)-max(y,r))\]</span></p><p><span class="math inline">\(f(x_0,y)\)</span>在固定x坐标的情况下，<span class="math inline">\(f(x_0,y)\)</span>先增后减，最大值点为<span class="math inline">\(\left \lfloor \frac{m+1}{2} \right \rfloor\)</span></p><p>全局最大值点为<span class="math inline">\((\left \lfloor \frac{n+1}{2} \right \rfloor,\left \lfloor \frac{m+1}{2} \right \rfloor)\)</span></p><p>因此，可以得到的算法为：1.从每一行的最大值点开始，向两边扩展；2.从全局最大值点开始BFS</p><p>题目说精确度1e-9，小数要输出到第9位以后，默认double输出6位导致WA<br>代码实现算法1，其中’D’表示decrease，向左边扩展，‘I’表示increase，向右边扩展<br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, r, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x, y;</span><br><span class="line">  ll val;</span><br><span class="line">  <span class="keyword">char</span> type;</span><br><span class="line">  Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span> type)</span><br><span class="line">  : x(x), y(y), type(type) &#123;</span><br><span class="line">    val = (min(n + <span class="number">1</span>, x + r) - max(x, r)) * <span class="number">1L</span>L * (min(m + <span class="number">1</span>, y + r) - max(y, r));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val &lt; p.val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  priority_queue&lt;Point, <span class="built_in">vector</span>&lt;Point&gt; &gt; que;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    que.push(Point(x, mid, <span class="string">'D'</span>));</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= m) &#123;</span><br><span class="line">      que.push(Point(x, mid + <span class="number">1</span>, <span class="string">'I'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ll sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">    Point p = que.top(); que.pop();</span><br><span class="line">    sum += p.val;</span><br><span class="line">    <span class="keyword">if</span> (p.type == <span class="string">'D'</span> &amp;&amp; p.y - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      que.push(Point(p.x, p.y - <span class="number">1</span>, <span class="string">'D'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.type == <span class="string">'I'</span> &amp;&amp; p.y + <span class="number">1</span> &lt;= m) &#123;</span><br><span class="line">      que.push(Point(p.x, p.y + <span class="number">1</span>, <span class="string">'I'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>, (<span class="keyword">double</span>)sum / (n - r + <span class="number">1</span>) / (m - r + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;m, &amp;r, &amp;k);</span><br><span class="line">  solve();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是个数学题a…&lt;br&gt;
所有的&lt;span class=&quot;math inline&quot;&gt;\(r*r\)&lt;/span&gt;的scoop的数目为&lt;span class=&quot;math inline&quot;&gt;\((n-r+1)*(m-r+1)\)&lt;/span&gt;&lt;br&gt;
其中包含坐标&lt;span class=&quot;math inline&quot;&gt;\((x,y)\)&lt;/span&gt;的scoop的数目为（坐标index从1开始）&lt;span class=&quot;math display&quot;&gt;\[f(x,y)=(min(n+1,x+r)-max(x,r))*(min(m+1,y+r)-max(y,r))\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(f(x_0,y)\)&lt;/span&gt;在固定x坐标的情况下，&lt;span class=&quot;math inline&quot;&gt;\(f(x_0,y)\)&lt;/span&gt;先增后减，最大值点为&lt;span class=&quot;math inline&quot;&gt;\(\left \lfloor \frac{m+1}{2} \right \rfloor\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;全局最大值点为&lt;span class=&quot;math inline&quot;&gt;\((\left \lfloor \frac{n+1}{2} \right \rfloor,\left \lfloor \frac{m+1}{2} \right \rfloor)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此，可以得到的算法为：1.从每一行的最大值点开始，向两边扩展；2.从全局最大值点开始BFS&lt;/p&gt;
&lt;p&gt;题目说精确度1e-9，小数要输出到第9位以后，默认double输出6位导致WA&lt;br&gt;
代码实现算法1，其中’D’表示decrease，向左边扩展，‘I’表示increase，向右边扩展&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
